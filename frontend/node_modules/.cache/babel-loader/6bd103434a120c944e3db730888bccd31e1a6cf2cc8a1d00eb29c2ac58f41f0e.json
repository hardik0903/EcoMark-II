{"ast":null,"code":"// src/components/SustainableBrands.js\nimport React,{useState}from'react';import'./SustainableBrands.css';// Embed your Google API key (WARNING: Hardcoding your API key is not recommended for production)\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GOOGLE_API_KEY=\"AIzaSyBY_24wnWmxwNpjAzdi2CUQGJLfZh7b61U\";// Replace with your numeric project number (not the project ID)\nconst NUMERIC_PROJECT_NUMBER=\"123456789012\";// <-- REPLACE with your actual numeric project number\n// Fully qualified model name using the numeric project number\nconst MODEL_ID=`projects/${NUMERIC_PROJECT_NUMBER}/locations/us-central1/models/text-bison-001`;// Construct the API URL using the fully qualified model name\nconst API_BASE_URL=`https://generativelanguage.googleapis.com/v1beta2/${MODEL_ID}:generate?key=${GOOGLE_API_KEY}`;function SustainableBrands(){const[brandName,setBrandName]=useState('');const[analysis,setAnalysis]=useState(null);const[loading,setLoading]=useState(false);const[error,setError]=useState('');// Function to call your Flask backend proxy endpoint that in turn calls Google API\n// (If you want to call Google API directly from the client, use the code below.)\nconst generateContent=async prompt=>{try{const response=await fetch(API_BASE_URL,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({prompt:{text:prompt},temperature:0.7,candidate_count:1})});const data=await response.json();if(data.error){throw new Error(data.error.message||\"Unknown error\");}// Assuming the API returns an object with a 'candidates' array,\n// and each candidate has an 'output' field.\nif(data.candidates&&data.candidates.length>0){return data.candidates[0].output;}return\"\";}catch(err){console.error(\"Error in generateContent:\",err);throw err;}};const handleSubmit=async e=>{e.preventDefault();if(!brandName.trim()){setError('Please enter a brand name');return;}setLoading(true);setError('');try{// Build prompt for detailed analysis with context\nconst analysisPrompt=`Gather and process information from various sources—including corporate sustainability reports, news articles, and online reviews—about the brand \"${brandName}\". Provide a detailed analysis of its sustainability efforts (energy efficiency, waste reduction, ethical sourcing, etc.) and include a brief contextual summary. Separate the detailed analysis and the context summary with the delimiter \"CONTEXT:\"`;const analysisText=await generateContent(analysisPrompt);let detailedAnalysis=analysisText;let contextSummary=\"No additional context provided.\";if(analysisText.includes(\"CONTEXT:\")){const parts=analysisText.split(\"CONTEXT:\");detailedAnalysis=parts[0].trim();contextSummary=parts[1].trim();}// Build prompt for sustainability score (expecting JSON output)\nconst scorePrompt=`Provide only a JSON object containing the sustainable score of the brand in the following format: {\"score\": \"x%\"} (do not include any additional text)`;const scoreResponseText=await generateContent(scorePrompt);const match=scoreResponseText.match(/(\\d+)%/);let scoreValue=match?parseFloat(match[1]):50;setAnalysis({brandName:brandName.trim(),analysis:detailedAnalysis,context:contextSummary,score:scoreValue});}catch(err){console.error('Error analyzing brand:',err);setError('Failed to analyze brand. Please try again.');}finally{setLoading(false);}};const renderGaugeMeter=()=>{if(!analysis)return null;const{score}=analysis;const angle=score/100*180;return/*#__PURE__*/_jsx(\"div\",{className:\"gauge-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"gauge\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"gauge-fill\",style:{transform:`rotate(${angle}deg)`,backgroundColor:score>50?'#4CAF50':'#FF5252'}}),/*#__PURE__*/_jsx(\"div\",{className:\"gauge-cover\",children:/*#__PURE__*/_jsxs(\"span\",{children:[score,\"%\"]})})]})});};return/*#__PURE__*/_jsxs(\"div\",{className:\"sustainable-brands\",children:[/*#__PURE__*/_jsxs(\"video\",{autoPlay:true,loop:true,muted:true,playsInline:true,className:\"bg-video\",children:[/*#__PURE__*/_jsx(\"source\",{src:\"https://cdn.pixabay.com/video/2017/01/12/7241-199190972_large.mp4\",type:\"video/mp4\"}),\"Your browser does not support the video tag.\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"video-overlay\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Is Your Favorite Brand Sustainable-friendly?\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:brandName,onChange:e=>setBrandName(e.target.value),placeholder:\"Enter brand name...\",required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:loading,children:loading?'Analyzing...':'Analyze Brand'})]}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:error})]}),analysis&&/*#__PURE__*/_jsxs(\"div\",{className:\"analysis-results\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Sustainability Analysis for \",analysis.brandName]}),renderGaugeMeter(),/*#__PURE__*/_jsxs(\"div\",{className:\"analysis-text\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Sustainability Report\"}),/*#__PURE__*/_jsx(\"div\",{className:\"report-content\",children:analysis.analysis.split('\\n').map((paragraph,idx)=>/*#__PURE__*/_jsx(\"p\",{children:paragraph},idx))}),/*#__PURE__*/_jsxs(\"div\",{className:\"analysis-context\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Context\"}),/*#__PURE__*/_jsx(\"div\",{className:\"report-content\",children:/*#__PURE__*/_jsx(\"p\",{children:analysis.context})})]})]})]})]});}export default SustainableBrands;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","GOOGLE_API_KEY","NUMERIC_PROJECT_NUMBER","MODEL_ID","API_BASE_URL","SustainableBrands","brandName","setBrandName","analysis","setAnalysis","loading","setLoading","error","setError","generateContent","prompt","response","fetch","method","headers","body","JSON","stringify","text","temperature","candidate_count","data","json","Error","message","candidates","length","output","err","console","handleSubmit","e","preventDefault","trim","analysisPrompt","analysisText","detailedAnalysis","contextSummary","includes","parts","split","scorePrompt","scoreResponseText","match","scoreValue","parseFloat","context","score","renderGaugeMeter","angle","className","children","style","transform","backgroundColor","autoPlay","loop","muted","playsInline","src","type","onSubmit","value","onChange","target","placeholder","required","disabled","map","paragraph","idx"],"sources":["C:/Users/Hardik/OneDrive/Desktop/EcoMark/frontend/src/components/SustainableBrands.js"],"sourcesContent":["// src/components/SustainableBrands.js\r\nimport React, { useState } from 'react';\r\nimport './SustainableBrands.css';\r\n\r\n// Embed your Google API key (WARNING: Hardcoding your API key is not recommended for production)\r\nconst GOOGLE_API_KEY = \"AIzaSyBY_24wnWmxwNpjAzdi2CUQGJLfZh7b61U\";\r\n\r\n// Replace with your numeric project number (not the project ID)\r\nconst NUMERIC_PROJECT_NUMBER = \"123456789012\";  // <-- REPLACE with your actual numeric project number\r\n\r\n// Fully qualified model name using the numeric project number\r\nconst MODEL_ID = `projects/${NUMERIC_PROJECT_NUMBER}/locations/us-central1/models/text-bison-001`;\r\n\r\n// Construct the API URL using the fully qualified model name\r\nconst API_BASE_URL = `https://generativelanguage.googleapis.com/v1beta2/${MODEL_ID}:generate?key=${GOOGLE_API_KEY}`;\r\n\r\nfunction SustainableBrands() {\r\n  const [brandName, setBrandName] = useState('');\r\n  const [analysis, setAnalysis] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  // Function to call your Flask backend proxy endpoint that in turn calls Google API\r\n  // (If you want to call Google API directly from the client, use the code below.)\r\n  const generateContent = async (prompt) => {\r\n    try {\r\n      const response = await fetch(API_BASE_URL, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          prompt: {\r\n            text: prompt\r\n          },\r\n          temperature: 0.7,\r\n          candidate_count: 1\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      if (data.error) {\r\n        throw new Error(data.error.message || \"Unknown error\");\r\n      }\r\n      // Assuming the API returns an object with a 'candidates' array,\r\n      // and each candidate has an 'output' field.\r\n      if (data.candidates && data.candidates.length > 0) {\r\n        return data.candidates[0].output;\r\n      }\r\n      return \"\";\r\n    } catch (err) {\r\n      console.error(\"Error in generateContent:\", err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!brandName.trim()) {\r\n      setError('Please enter a brand name');\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    setError('');\r\n    try {\r\n      // Build prompt for detailed analysis with context\r\n      const analysisPrompt = `Gather and process information from various sources—including corporate sustainability reports, news articles, and online reviews—about the brand \"${brandName}\". Provide a detailed analysis of its sustainability efforts (energy efficiency, waste reduction, ethical sourcing, etc.) and include a brief contextual summary. Separate the detailed analysis and the context summary with the delimiter \"CONTEXT:\"`;\r\n      const analysisText = await generateContent(analysisPrompt);\r\n      let detailedAnalysis = analysisText;\r\n      let contextSummary = \"No additional context provided.\";\r\n      if (analysisText.includes(\"CONTEXT:\")) {\r\n        const parts = analysisText.split(\"CONTEXT:\");\r\n        detailedAnalysis = parts[0].trim();\r\n        contextSummary = parts[1].trim();\r\n      }\r\n      \r\n      // Build prompt for sustainability score (expecting JSON output)\r\n      const scorePrompt = `Provide only a JSON object containing the sustainable score of the brand in the following format: {\"score\": \"x%\"} (do not include any additional text)`;\r\n      const scoreResponseText = await generateContent(scorePrompt);\r\n      const match = scoreResponseText.match(/(\\d+)%/);\r\n      let scoreValue = match ? parseFloat(match[1]) : 50;\r\n      \r\n      setAnalysis({\r\n        brandName: brandName.trim(),\r\n        analysis: detailedAnalysis,\r\n        context: contextSummary,\r\n        score: scoreValue\r\n      });\r\n    } catch (err) {\r\n      console.error('Error analyzing brand:', err);\r\n      setError('Failed to analyze brand. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const renderGaugeMeter = () => {\r\n    if (!analysis) return null;\r\n    const { score } = analysis;\r\n    const angle = (score / 100) * 180;\r\n    return (\r\n      <div className=\"gauge-container\">\r\n        <div className=\"gauge\">\r\n          <div\r\n            className=\"gauge-fill\"\r\n            style={{\r\n              transform: `rotate(${angle}deg)`,\r\n              backgroundColor: score > 50 ? '#4CAF50' : '#FF5252'\r\n            }}\r\n          ></div>\r\n          <div className=\"gauge-cover\">\r\n            <span>{score}%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"sustainable-brands\">\r\n      {/* Background Video */}\r\n      <video autoPlay loop muted playsInline className=\"bg-video\">\r\n        <source\r\n          src=\"https://cdn.pixabay.com/video/2017/01/12/7241-199190972_large.mp4\"\r\n          type=\"video/mp4\"\r\n        />\r\n        Your browser does not support the video tag.\r\n      </video>\r\n      <div className=\"video-overlay\"></div>\r\n      \r\n      <h1>Is Your Favorite Brand Sustainable-friendly?</h1>\r\n      \r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            value={brandName}\r\n            onChange={(e) => setBrandName(e.target.value)}\r\n            placeholder=\"Enter brand name...\"\r\n            required\r\n          />\r\n          <button type=\"submit\" disabled={loading}>\r\n            {loading ? 'Analyzing...' : 'Analyze Brand'}\r\n          </button>\r\n        </div>\r\n        {error && <p className=\"error\">{error}</p>}\r\n      </form>\r\n      \r\n      {analysis && (\r\n        <div className=\"analysis-results\">\r\n          <h2>Sustainability Analysis for {analysis.brandName}</h2>\r\n          {renderGaugeMeter()}\r\n          <div className=\"analysis-text\">\r\n            <h3>Sustainability Report</h3>\r\n            <div className=\"report-content\">\r\n              {analysis.analysis.split('\\n').map((paragraph, idx) => (\r\n                <p key={idx}>{paragraph}</p>\r\n              ))}\r\n            </div>\r\n            <div className=\"analysis-context\">\r\n              <h3>Context</h3>\r\n              <div className=\"report-content\">\r\n                <p>{analysis.context}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SustainableBrands;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}